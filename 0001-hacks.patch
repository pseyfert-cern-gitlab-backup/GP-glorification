From 0f2125fc9e66813747d16ff5dcf69817e5269d7b Mon Sep 17 00:00:00 2001
From: Paul Seyfert <paul.seyfert@mib.infn.it>
Date: Wed, 22 Feb 2017 21:21:31 +0100
Subject: [PATCH] hacks

---
 CMakeLists.txt                                  |   3 +
 Hlt/HltTracking/src/HltTrackFilterGhostProb.cpp |   2 +-
 Tr/TrackUtils/.ycm_extra_conf.py                | 128 ++++++++++++++++++++++++
 Tr/TrackUtils/CMakeLists.txt                    |   2 +
 Tr/TrackUtils/src/TrackBestTrackCreator.cpp     |   1 +
 5 files changed, 135 insertions(+), 1 deletion(-)
 create mode 100644 Tr/TrackUtils/.ycm_extra_conf.py

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 251482d..a283ee1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -24,3 +24,6 @@ if(GangaTools_FOUND)
 else()
   message(WARNING "Ganga integration not available (cannot find GangaTools.cmake)")
 endif()
+
+set(CMAKE_EXPORT_COMPILE_COMMANDS "ON")
+
diff --git a/Hlt/HltTracking/src/HltTrackFilterGhostProb.cpp b/Hlt/HltTracking/src/HltTrackFilterGhostProb.cpp
index 1e29d45..8d90a3c 100644
--- a/Hlt/HltTracking/src/HltTrackFilterGhostProb.cpp
+++ b/Hlt/HltTracking/src/HltTrackFilterGhostProb.cpp
@@ -75,7 +75,7 @@ StatusCode HltTrackFilterGhostProb::tracksFromTrack( const LHCb::Track& track,
   }else{
     return StatusCode::SUCCESS;
   }
-  if ( track.ghostProbability() < m_maxGhostProbCut ){
+  if ( track.ghostProbability() < 1.5 ){
     // There is a good enough candidate, put the track into the output.
     tracks.push_back( tr );
   }
diff --git a/Tr/TrackUtils/.ycm_extra_conf.py b/Tr/TrackUtils/.ycm_extra_conf.py
new file mode 100644
index 0000000..5273f63
--- /dev/null
+++ b/Tr/TrackUtils/.ycm_extra_conf.py
@@ -0,0 +1,128 @@
+
+
+import os
+import ycm_core
+
+from clang_helpers import PrepareClangFlags
+
+def DirectoryOfThisScript():
+    return os.path.dirname(os.path.abspath(__file__))
+
+# This is the single most important line in this script. Everything else is just nice to have but
+# not strictly necessary.
+compilation_database_folder = DirectoryOfThisScript()
+
+# This provides a safe fall-back if no compilation commands are available. You could also add a
+# includes relative to your project directory, for example.
+flags = [
+    '-Wall',
+    '-std=c++11',
+    '-stdlib=libc++',
+    '-x',
+    'c++',
+    '-I',
+    '.',
+    '-isystem', '/usr/local/include',
+    '-isystem', '/usr/include',
+    '-I.',
+]
+
+if compilation_database_folder:
+  if os.path.exists('compile_commands.json'):
+    database = ycm_core.CompilationDatabase(compilation_database_folder)
+  else:
+     try:
+       cmtconfig = os.environ['CMTCONFIG']
+     except KeyError:
+       database = None
+     else:
+       buildpath = "build."+cmtconfig
+       relpath = os.path.abspath(os.path.curdir)
+       abortcounter = 0
+       while not os.path.exists(os.path.join(relpath,buildpath,'compile_commands.json')):
+           if abortcounter > 6 or relpath == '/':
+               break
+           relpath = os.path.dirname(relpath)
+           abortcounter += 1
+       if os.path.exists(os.path.join(relpath,buildpath,'compile_commands.json')):
+          database = ycm_core.CompilationDatabase(os.path.join(relpath,buildpath))
+       else:
+          database = None
+else:
+    database = None
+
+SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]
+
+def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
+  if not working_directory:
+    return list( flags )
+  new_flags = []
+  make_next_absolute = False
+  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
+  for flag in flags:
+    new_flag = flag
+
+    if make_next_absolute:
+      make_next_absolute = False
+      if not flag.startswith( '/' ):
+        new_flag = os.path.join( working_directory, flag )
+
+    for path_flag in path_flags:
+      if flag == path_flag:
+        make_next_absolute = True
+        break
+
+      if flag.startswith( path_flag ):
+        path = flag[ len( path_flag ): ]
+        new_flag = path_flag + os.path.join( working_directory, path )
+        break
+
+    if new_flag:
+      new_flags.append( new_flag )
+  return new_flags
+
+
+def IsHeaderFile( filename ):
+  extension = os.path.splitext( filename )[ 1 ]
+  return extension in [ '.h', '.hxx', '.hpp', '.hh' ]
+
+
+def GetCompilationInfoForFile( filename ):
+  # The compilation_commands.json file generated by CMake does not have entries
+  # for header files. So we do our best by asking the db for flags for a
+  # corresponding source file, if any. If one exists, the flags for that file
+  # should be good enough.
+  if IsHeaderFile( filename ):
+    basename = os.path.splitext( filename )[ 0 ]
+    for extension in SOURCE_EXTENSIONS:
+      replacement_file = basename + extension
+      if os.path.exists( replacement_file ):
+        compilation_info = database.GetCompilationInfoForFile(
+          replacement_file )
+        if compilation_info.compiler_flags_:
+          return compilation_info
+    return None
+  return database.GetCompilationInfoForFile( filename )
+
+
+def FlagsForFile( filename, **kwargs ):
+  if database:
+    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
+    # python list, but a "list-like" StringVec object
+    compilation_info = GetCompilationInfoForFile( filename )
+    if not compilation_info:
+      return None
+
+    final_flags = MakeRelativePathsInFlagsAbsolute(
+      compilation_info.compiler_flags_,
+      compilation_info.compiler_working_dir_ )
+
+  else:
+    relative_to = DirectoryOfThisScript()
+    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )
+
+  return {
+    'flags': final_flags,
+    'do_cache': True
+  }
+
diff --git a/Tr/TrackUtils/CMakeLists.txt b/Tr/TrackUtils/CMakeLists.txt
index ce00cf3..39bc7bd 100644
--- a/Tr/TrackUtils/CMakeLists.txt
+++ b/Tr/TrackUtils/CMakeLists.txt
@@ -23,3 +23,5 @@ gaudi_add_module(TrackUtils
                  INCLUDE_DIRS Tr/TrackInterfaces Tf/TfKernel
                  LINK_LIBRARIES CaloDetLib OTDetLib STDetLib HltEvent LinkerEvent TrackEvent GaudiAlgLib HltInterfaces LHCbMathLib PartPropLib TrackFitEvent TrackKernel)
 
+
+
diff --git a/Tr/TrackUtils/src/TrackBestTrackCreator.cpp b/Tr/TrackUtils/src/TrackBestTrackCreator.cpp
index 1f967dd..4c2022c 100644
--- a/Tr/TrackUtils/src/TrackBestTrackCreator.cpp
+++ b/Tr/TrackUtils/src/TrackBestTrackCreator.cpp
@@ -372,6 +372,7 @@ StatusCode TrackBestTrackCreator::initialize()
     }
   }
   
+  m_maxGhostProb = 1.5; // The default value is 999
   
   // Print out the user-defined settings
   // -----------------------------------
-- 
2.1.4

